{"version":3,"sources":["slugify.ts","markdown.ts","walk.ts","data/posts.ts","components/Contents.tsx","components/Lamp.tsx","layouts/Base.tsx","layouts/Post.tsx","pages/Archive.tsx","pages/Blog.tsx","index.tsx"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import { Slugger } from 'marked'\n\nconst cachedSlugger = new Slugger()\n\nfunction slugify(text: string, unique = false) {\n   return unique ? cachedSlugger.slug(text) : new Slugger().slug(text)\n}\n\nexport default slugify\n","import { load } from 'cheerio'\nimport { readFileSync } from 'fs-extra'\nimport { highlight } from 'highlight.js'\nimport marked, { Renderer } from 'marked'\nimport slugify from '~/slugify'\n\nconst Figure = ({ body, caption }: { body: string; caption?: string }) => `\n   <figure>\n      ${body}\n      ${caption ? `<figcaption>${caption}</figcaption>` : ''}\n   </figure>\n`\n\nconst renderer = new Renderer()\n\nmarked.setOptions({\n   renderer,\n   highlight: (code, lang) => highlight(lang || 'plaintext', code).value,\n})\n\nrenderer.code = (code, language) =>\n   Figure({\n      body: `<pre class=\"hljs\"><code>${\n         highlight(language || 'plaintext', code).value\n      }</code></pre>`,\n   })\n\nrenderer.heading = (text, level, raw) => {\n   const tag = `h${level}`\n   const id = slugify(raw, true)\n   return `\n      <${tag} id=\"${id}\" class=\"post-heading\">\n         <a href=\"#${id}\">${text}</a>\n      </${tag}>\n   `\n}\n\nrenderer.html = html => {\n   const $ = load(html)\n\n   const children = $('body').children().toArray()\n\n   return children\n      .map(child => {\n         if (child.tagName !== 'insert') {\n            return $.html(child)\n         }\n\n         const attrs = child.attribs\n\n         const { type } = attrs\n         delete attrs.type\n\n         switch (type) {\n            case 'image': {\n               const { title } = attrs\n               delete attrs.title\n\n               const caption = title || attrs.alt\n\n               return Figure({\n                  body: `<img ${foo(attrs)} />`,\n                  caption,\n               })\n            }\n\n            case 'iframe': {\n               const caption = attrs.title\n               delete attrs.title\n\n               return Figure({\n                  body: `<iframe ${foo(attrs)}></iframe>`,\n                  caption,\n               })\n            }\n\n            case 'video': {\n               const caption = attrs.title\n               delete attrs.title\n\n               return Figure({\n                  body: `<video ${foo(attrs)}></video>`,\n                  caption,\n               })\n            }\n\n            default:\n               throw new Error('Unknown insert type')\n         }\n      })\n      .join('\\n')\n}\n\nexport default function markdown(path: string) {\n   return marked(readFileSync(path, 'utf8'))\n}\n\nfunction foo(attrs: any) {\n   const baz = Object.entries(attrs)\n      .map(([k, v]) => `${k}=\"${v}\"`)\n      .join(' ')\n\n   return baz.length > 0 ? ' ' + baz : ''\n}\n","import { lstatSync, readdirSync } from 'fs'\n\nexport default function walk(path: string): string[] {\n   return readdirSync(path)\n      .map(item => {\n         const itemPath = `${path}/${item}`\n         return lstatSync(itemPath).isDirectory() ? walk(itemPath) : itemPath\n      })\n      .flat()\n}\n","import { load } from 'cheerio'\nimport { relative } from 'path'\nimport markdown from '~markdown'\nimport slugify from '~slugify'\nimport walk from '~walk'\n\nconst not = (x: unknown) => !x\n\ntype PostFileData = {\n   date: {\n      day: number\n      year: number\n      month: number\n   }\n   title: string\n   url: string\n}\n\nfunction getData(path: string): PostFileData {\n   // <year>/<month>/<day>-<title>(/<sub>)?\n   const match = relative('./posts', path).match(/(\\d+)\\/(\\d+)\\/(\\d+)-([^\\/]+)(.+)?/)\n\n   if (match === null) {\n      throw new Error(\n         [\n            `Unexpected path found: ${path}`,\n            'Post path must match one of following patterns:',\n            '  <year>/<month>/<day>-<title>.md',\n            '  <year>/<month>/<day>-<title>/index.md',\n            '  <year>/<month>/<day>-<title>/<sub>',\n         ].join('\\n')\n      )\n   }\n\n   const [year, month, day, name, sub] = match.slice(1)\n\n   const title = name.replace('.md', '')\n   const timestamp = [year, month, day].join('')\n   const url = '/' + timestamp + '-' + slugify(title) + (sub?.replace('index.md', '') ?? '')\n\n   const date = {\n      year: Number(year),\n      month: Number(month),\n      day: Number(day),\n   }\n\n   return {\n      date,\n      title,\n      url,\n   }\n}\n\ntype RelatedPostData = {\n   title: string\n   url: string\n}\n\nexport type Heading = {\n   level: number\n   id: string\n   text: string\n}\n\nexport type PostData = PostFileData & {\n   path: string\n\n   content: string\n   excerpt: string\n   headings: Heading[]\n\n   next: RelatedPostData | null\n   prev: RelatedPostData | null\n}\n\nconst postsFiles = walk('./posts')\n   .filter(path => not(path.includes('node_modules')))\n   .filter(path => path.endsWith('.md'))\n\nexport const posts: PostData[] = postsFiles\n   .map((path, idx) => {\n      const { date, title, url } = getData(path)\n\n      const content = markdown(path)\n      const excerpt = content.split(/(?<=<\\/p>)/)[0]\n\n      const next = idx === 0 ? null : getData(postsFiles[idx - 1])\n      const prev = idx === postsFiles.length - 1 ? null : getData(postsFiles[idx + 1])\n\n      const $ = load(content)\n\n      const titleHeading: Heading = {\n         level: 1,\n         id: slugify(title),\n         text: title,\n      }\n      const headings = [titleHeading].concat(\n         $('.post-heading')\n            .toArray()\n            .map(h => ({\n               level: Number(h.tagName.replace('h', '')),\n               id: h.attribs.id,\n               text: $(h).text(),\n            }))\n      )\n\n      return {\n         content,\n         date,\n         excerpt,\n         headings,\n         next,\n         path,\n         prev,\n         title,\n         url,\n      }\n   })\n   .reverse()\n\ntype PostAssetData = {\n   path: string\n   url: string\n}\n\nconst postAssetsFiles = walk('./posts')\n   .filter(path => not(path.includes('node_modules')))\n   .filter(path => not(path.endsWith('.md')))\n   .filter(path => not(['.prettierrc', '.DS_Store'].some(k => path.endsWith(k))))\n\nexport const postsAssets: PostAssetData[] = postAssetsFiles.map(path => {\n   const { url } = getData(path)\n\n   return {\n      path,\n      url,\n   }\n})\n","import React, { FC } from 'react'\nimport { Heading } from '~data/posts'\n\ntype ContentsNode = {\n   value: Heading\n   children: ContentsNode[]\n}\n\nfunction parseHeadings(headings: Heading[], level: number): ContentsNode[] {\n   if (headings.length === 0) {\n      return []\n   }\n\n   const levelHeadings = headings.filter(h => h.level === level)\n   const levelIndexes = levelHeadings.map(h => headings.indexOf(h))\n\n   return levelIndexes.map((_, i) => {\n      const levelStart = levelIndexes[i]\n      const levelEnd = levelIndexes[i + 1]\n      const subHeadings = headings.slice(levelStart + 1, levelEnd)\n\n      return {\n         value: headings[levelStart],\n         children: parseHeadings(subHeadings, level + 1),\n      }\n   })\n}\n\nfunction render(contents: ContentsNode[], level = 1) {\n   if (contents.length === 0) {\n      return null\n   }\n\n   return (\n      <ul>\n         {contents.map(({ value, children }) => (\n            <li key={value.id}>\n               <a href={`#${value.id}`}>{value.text}</a>\n               {render(children, level + 1)}\n            </li>\n         ))}\n      </ul>\n   )\n}\n\ntype Props = {\n   headings: Heading[]\n}\n\nconst Contents: FC<Props> = ({ headings }: Props) => (\n   <>\n      <aside className=\"contents\">\n         Contents\n         <nav>{render(parseHeadings(headings, 1))}</nav>\n      </aside>\n\n      <script\n         dangerouslySetInnerHTML={{\n            __html: scrollScript,\n         }}\n      />\n   </>\n)\n\nconst scrollScript = `\nconst topThreshold = 20\n\nconst initialTop = 270 // refer index.css for .contents top offset\nconst finalTop = 100\n\nlet prevTop = 0\n\nwindow.addEventListener('scroll', contentsMain, {\n   passive: true,\n})\n\nwindow.addEventListener('resize', contentsMain, {\n   passive: true,\n})\n\nsetTimeout(contentsMain, 1000)\n\nfunction contentsMain() {\n   if (window.innerWidth >= 1300) {\n      moveSidebar()\n      highlightCurrentSection()\n   } else {\n      resetSidebar()\n   }\n}\n\nfunction highlightCurrentSection() {\n   const $contents = document.querySelector('.contents')\n\n   const $targetLink = Array.from($contents.querySelectorAll('a'))\n      .reverse()\n      .find((a, i) => {\n         const id = a.getAttribute('href').slice(1)\n         const h = document.getElementById(id)\n         const top = h.getBoundingClientRect().top\n         return top < topThreshold\n      })\n\n   if (!$targetLink) {\n      return\n   }\n\n   $contents.querySelectorAll('.current-section').forEach($currentSection => {\n      $currentSection.classList.remove('current-section')\n   })\n\n   $targetLink.classList.add('current-section')\n}\n\nfunction moveSidebar() {\n   const top = Math.max(finalTop, initialTop - window.scrollY)\n\n   if (prevTop === top) {\n      return\n   }\n\n   prevTop = top\n\n   const $contents = document.querySelector('.contents')\n   $contents.style.top = top + 'px'\n}\n\nfunction resetSidebar() {\n   const $contents = document.querySelector('.contents')\n\n   $contents.style.top = 0\n\n   $contents.querySelectorAll('.current-section').forEach($currentSection => {\n      $currentSection.classList.remove('current-section')\n   })\n}\n`\n\nexport default Contents\n","import React, { FC } from 'react'\n\nconst r = 20\n\nconst Lamp: FC = () => (\n   <>\n      <button className=\"lamp\">\n         <svg viewBox=\"0 0 100 100\">\n            <circle cx=\"50\" cy=\"50\" r={r + r / 2 + r / 4} fill=\"none\" strokeWidth={r / 2} />\n            <path d={`M 50 ${50 + r} A ${r} ${r} 0 0 1 50 ${50 - r}`} />\n            <path d={`M 50 ${50 + r} A ${r} ${r} 0 0 0 50 ${50 - r}`} />\n         </svg>\n      </button>\n\n      <script\n         dangerouslySetInnerHTML={{\n            __html: lampScript,\n         }}\n      />\n   </>\n)\n\nconst lampScript = `\ndocument.querySelector('.lamp').addEventListener('click', toggleColorScheme)\n\nconst darkModeMediaQuery = matchMedia('(prefers-color-scheme: dark)')\ndarkModeMediaQuery.addListener(toggleColorScheme)\n\nconst documentClasses = document.documentElement.classList\ndocumentClasses.add(getColorScheme())\n\nfunction getColorScheme() {\n   const savedColorScheme = localStorage.getItem('color-scheme')\n\n   if (savedColorScheme) {\n      return savedColorScheme === 'dark' ? 'dark' : 'light'\n   }\n\n   return darkModeMediaQuery.matches ? 'dark' : 'light'\n}\n\nfunction toggleColorScheme() {\n   const colorScheme = getColorScheme()\n   documentClasses.remove(colorScheme)\n\n   const nextColorScheme = colorScheme === 'dark' ? 'light' : 'dark'\n   documentClasses.add(nextColorScheme)\n   localStorage.setItem('color-scheme', nextColorScheme)\n}\n`\n\nexport default Lamp\n","import React, { FC } from 'react'\nimport Lamp from '~components/Lamp'\n\ntype Props = {\n   title: string\n}\n\nconst Base: FC<Props> = ({ children, title }) => (\n   <html lang=\"en-US\">\n      <head>\n         <meta charSet=\"UTF-8\" />\n         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1\" />\n\n         <title>{title}</title>\n\n         <link rel=\"stylesheet\" href=\"/index.css\" />\n         <script src=\"/sw.js\"></script>\n      </head>\n\n      <body>\n         <div className=\"fonts-loader\">\n            <div>0</div>\n            <div style={{ fontStyle: 'italic' }}>1</div>\n            <div style={{ fontWeight: 'bold' }}>2</div>\n            <div style={{ fontWeight: 'bold', fontStyle: 'italic' }}>3</div>\n         </div>\n\n         <header className=\"main-nav\">\n            <nav>\n               <ul className=\"nav-list\">\n                  <li>\n                     <h1>\n                        <a href=\"/\">Blog</a>\n                     </h1>\n                  </li>\n\n                  <li>\n                     <a href=\"/archive\">Archive</a>\n                  </li>\n\n                  <li>\n                     <a href=\"/about\">About</a>\n                  </li>\n               </ul>\n            </nav>\n\n            <Lamp />\n         </header>\n\n         {children}\n\n         <footer className=\"social-links\">\n            <nav>\n               <ul className=\"nav-list\">\n                  <li>\n                     <a target=\"_blank\" href=\"https://github.com/zhirzh\">\n                        github\n                     </a>\n                  </li>\n\n                  <div className=\"dot\">•</div>\n\n                  <li>\n                     <a target=\"_blank\" href=\"https://medium.com/@zhirzh\">\n                        medium\n                     </a>\n                  </li>\n\n                  <div className=\"dot\">•</div>\n\n                  <li>\n                     <a target=\"_blank\" href=\"https://twitter.com/zhirzh\">\n                        twitter\n                     </a>\n                  </li>\n\n                  <div className=\"dot\">•</div>\n\n                  <li>\n                     <a target=\"_blank\" href=\"https://www.linkedin.com/in/shirsh-zibbu\">\n                        linkedin\n                     </a>\n                  </li>\n\n                  <div className=\"dot\">•</div>\n\n                  <li>\n                     <a target=\"_blank\" href=\"https://stackoverflow.com/users/1343488/zhirzh\">\n                        stackoverflow\n                     </a>\n                  </li>\n               </ul>\n            </nav>\n         </footer>\n      </body>\n   </html>\n)\n\nexport default Base\n","import React, { FC } from 'react'\nimport Contents from '~components/Contents'\nimport { PostData } from '~data/posts'\nimport slugify from '~slugify'\nimport Base from './Base'\n\ntype Props = {\n   post: PostData\n}\n\nconst Post: FC<Props> = ({ post }) => (\n   <Base title={post.title}>\n      <h1 id={slugify(post.title)} className=\"post-heading\">\n         <a href={`#${slugify(post.title)}`}>{post.title}</a>\n      </h1>\n\n      <Contents headings={post.headings} />\n\n      <article\n         dangerouslySetInnerHTML={{\n            __html: post.content,\n         }}\n      />\n\n      <footer className=\"related-posts\">\n         <nav>\n            <ul className=\"nav-list\">\n               {post.prev && (\n                  <li className=\"related-posts-prev\">\n                     <a href={post.prev.url}>⟵ {post.prev.title}</a>\n                  </li>\n               )}\n\n               {post.next && (\n                  <li className=\"related-posts-next\">\n                     <a href={post.next.url}>{post.next.title} ⟶</a>\n                  </li>\n               )}\n            </ul>\n         </nav>\n      </footer>\n   </Base>\n)\n\nexport default Post\n","import React, { FC, Fragment } from 'react'\nimport { PostData, posts } from '~data/posts'\nimport Base from '~layouts/Base'\n\nconst postsByYear: { [year: string]: PostData[] } = {}\n\nposts.forEach(x => {\n   const { year } = x.date\n   postsByYear[year] = postsByYear[year]?.concat(x) || [x]\n})\n\nconst years = Object.keys(postsByYear).sort((a, b) => Number(b) - Number(a))\n\nconst Archive: FC = () => (\n   <Base title=\"Archive\">\n      {years.map(year => (\n         <Fragment key={year}>\n            <h2>{year}</h2>\n\n            <ul>\n               {postsByYear[year].map(post => (\n                  <li key={post.url}>\n                     <a href={post.url}>{post.title}</a>\n                  </li>\n               ))}\n            </ul>\n         </Fragment>\n      ))}\n   </Base>\n)\n\nexport default Archive\n","import React, { FC, Fragment } from 'react'\nimport { posts } from '~data/posts'\nimport Base from '~layouts/Base'\n\nconst Blog: FC = () => (\n   <Base title=\"Blog\">\n      {posts.map(post => (\n         <Fragment key={post.url}>\n            <h2 className=\"post-heading\">\n               <a href={post.url}>{post.title}</a>\n            </h2>\n\n            <article\n               dangerouslySetInnerHTML={{\n                  __html: post.excerpt,\n               }}\n            />\n         </Fragment>\n      ))}\n   </Base>\n)\n\nexport default Blog\n","import { copyFileSync, copySync, ensureDirSync, readFileSync, writeFileSync } from 'fs-extra'\nimport { dirname } from 'path'\nimport React from 'react'\nimport { renderToStaticMarkup } from 'react-dom/server'\nimport { posts, postsAssets } from '~data/posts'\nimport Post from '~layouts/Post'\nimport Archive from '~pages/Archive'\nimport Blog from '~pages/Blog'\nimport walk from '~walk'\n\nposts.forEach(post => {\n   const path = post.url\n   const htmlFile = './dist/' + path + (path.endsWith('/') ? 'index.html' : '.html')\n\n   ensureDirSync(dirname(htmlFile))\n   writeFileSync(htmlFile, '<!DOCTYPE html>' + renderToStaticMarkup(<Post post={post} />))\n})\n\npostsAssets.forEach(asset => {\n   const assetFile = `dist/${asset.url}`\n   ensureDirSync(dirname(assetFile))\n   copyFileSync(asset.path, assetFile)\n})\n\nwriteFileSync('dist/index.html', '<!DOCTYPE html>' + renderToStaticMarkup(<Blog />))\nwriteFileSync('dist/archive.html', '<!DOCTYPE html>' + renderToStaticMarkup(<Archive />))\n\ncopySync('src/assets', 'dist')\n\nconst buildFiles = walk('dist')\n   .map(file => file.replace(/^dist/, ''))\n   .filter(file => file !== '/sw.js')\n   .filter(file => !file.match(/\\.(map|gitignore)$/))\n   .map(file => {\n      if (file === '/index.html') {\n         return '/'\n      }\n\n      if (file.endsWith('/index.html')) {\n         return file.replace(/index\\.html$/, '')\n      }\n\n      return file.replace(/\\.html$/, '')\n   })\n\nwriteFileSync(\n   'dist/sw.js',\n   readFileSync('dist/sw.js', 'utf8').replace('__BUILD_FILES__', JSON.stringify(buildFiles))\n)\n\nconsole.log('done')\n"]}